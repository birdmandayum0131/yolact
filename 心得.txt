2020/08/25

	1. car roundabout
		box ID 效果不錯 主車輛完全沒有被搶走
		prior 256  最後幾個frame被右下角的紅車搶走了(原因 ??)
		only 256第一個frame右上角的花叢ID混淆了(??) ---> 256維的ID可能不夠?
		
	2. dance twirl
		onlyID 與box ID效果不錯
		兩個混用效果不太好
		--->猜測是因為物體變化較大時 兩種ID的距離都會普遍增大  這次混用時使用了固定的threshold  有可能threshold過小過嚴格
		---> 單獨使用時  Threshold會設比較大  效果都還行  代表同一物體的距離還是相較於其他物體還短的

	3.boxing fisheye 
		box ID效果不錯
		bothID  box優先的效果也稍微比其他好一點
		---> box ID在畫面中央的物體(攝影機focus的物體) 效果都很不錯
		
		------>匈牙利演算法需要加入  不然其他物體有可能會把原本的ID搶走(蓋掉)
		------>threshold不可以是固定值  根據物體大小不同  物體本身的形狀變化情況不同  e.g. 跳舞的人 vs 車  平均距離會增加or減少
		------>每個frame都更新ID風險太大(一次估計錯誤就會造成後面的ID亂掉)
		
2020/09/08
	
	---yolact coefficient id---
	!!!設計此實驗之距離判斷以及Re id之過程時
	!!!我假設在此物體的輪廓並沒有分割的很糟糕的情況下(此detection有正確被偵測到)
	!!!"相同"物體的輪廓資訊應該自然就要比"不同"物體的輪廓資訊要來的近
	1.大部分的效果都非常不錯
	
		@假設coefficient包含的是物體在輪廓上的資訊
			--->輪廓的資訊非常有助於re-id
		
		#Yolact的coefficient並不是使用triplet的方式訓練的
		#但卻能自然的形成相同物體distance相近的id
			--->triplet loss訓練時其實並不一定要對margin有所限制
			----有時候兩者本來很相近，並不一定需要強制兩向量遠離(我認為可能會造成網路focus在一些比較偏激的feature)
			----只要物體與自己的距離比與其他物體還小就好了(?)
			
			--->triplet loss的目標本身並不明確
			----說不定可以用類似的一系列訓練方式解決triplet loss所針對的問題(?)
			>>>>目標並"不"是將相同物體產生距離相近的向量(triplet loss原本的目標)
			>>>>而是相同物體產生出來的向量可以卷積or組合成相同的目標(隨意猜想)

	2.少數image stream物體可能會被其他"相同位置"但"不同class"之物體競爭
		
		#會競爭代表他們的coefficient也很相近
			--->已經使用cross class NMS解決
			----coefficient可能還包含其他資訊(?)
			
	3.目前物體的class confidence score普遍低，導致容易與其他雜訊混淆
	
		#yolact似乎本來就這樣(不是DAVIS特例)
			--->想辦法找出前景與雜訊到底還有哪些地方不同(不單純利用confidence score濾雜訊)
			----從已知資訊中找出不同
			----從未獲得資訊中找出不同
			
	--->2020/09/16已解決
	
			
	4.效果較差的情況大部分都是屬於"人"
	
		#唯獨"人"這類物體效果特別不好(打從mask就不太好)
			--->人類相較其他class在"外觀"、"輪廓"上較為複雜
			----不太能用與其他class相同維度的向量來描述
			
2020/09/16

	1.將程式碼的score threshold移至re-id部分一起做(效果應該是變慢但threshold現在可變)
		
		---設計核心概念---
		!!!因confidence score普遍低，因而許多前景物件都會在某些frame被濾掉，導致對應錯誤
			--->此處發現並不是普遍低，而是 "class不完全對應到" 或 "物體轉向正面" 時會明顯將低
		!!!嘗試利用coefficient的對應關係來輔助判斷confidence score，使得若coefficient有對應到(此處依賴於我們的對應判定比較嚴格)
		!!!就可以將score threshold降低，避免這些物體被濾掉
			
		!!!此處若嘗試成功，就可以製造出 "利用物體輪廓(coef)在時間軸上(obj list)的資訊 來輔助前背景(confidence score)判斷" 的情況
		
		#將score threshold判斷移至re-id部分，使得confidence較小的物體也能一起參與判斷(想辦法補齊遺失的前景物件)
			
			(1)初始化(第一個Frame)時使用score threshold，使得第一個frame盡量不要包含雜訊
				--->但也造成了某些video第一個frame偵測不到物體
					--->初始化模式繼續
					
			(2)將score threshold做成tensor matrix(每個物體threshold初始化為score threshold)
			
			(3)進行所有detection以及obj list的比對，若是有對應到，則將該物件的threshold降低為0(強制保留下來)
			
			(4)其他沒有對應到低score物件依舊不要(從matrix中直接抹掉)
			
			(5)更新obj list
				!!!此處會被更新至obj list的有三種物件
			
				[1]高score且有對應到之物件--->視為與前一frame對應到之物件--->更新obj list對應到之coef
				
				[2]高score沒有對應到之物件--->視為新偵測到的物件or高信心度的雜訊(目前不處理)--->將coef新增之obj list中
				
				[3]低score但有對應到之物件--->視為較難辨識(低信心度)但輪廓與過去物件相似(coef相似)之物件--->更新obj list對應到之coef
				
2020/09/23

	---想辦法處理人類分辨不好的問題---
	
	1.bike packing
		
		---觀察bike packing---
		
		#去觀察那些顯示沒有偵測出來的Frame
		#實際測試後其實大部分都有偵測到
			--->現有資訊還沒有利用完
			
		#被濾掉的detection大部分是在NMS被濾掉的(包括cross class的NMS)
			--->想辦法改變機制，讓NMS沒法濾掉它
			
		!!!針對basic NMS的情況
		#score比較低
			--->由於NMS會優先把confidence score比較高的放前面
			--->因此你的score如果不夠高，會被其他detection給取代掉
				--->觀察後其實某些被濾掉的人類score也不低
				--->但bbox有時候會只框出人類的一部份，score更高，從而把比較好的mask取代掉
					--->想辦法利用mask的資訊，去取到更準確的feature做confidence score判斷
					
		!!!針對cross class NMS的情況
		#其他物件的confidence score比人類高的情況很常見
		#因此不能單純的想把單一物件的score拉高(還有其他的問題)
		
		#人類在修理 or 與其他物件互動的時候
		#時常會發生bounding box與其他物件重疊的情況
		#但其實兩者在畫面上並沒有明顯重疊
		#但這就會造成NMS在判斷的時候需要在這兩個中取一個(但其實兩個都可以保留下來)
			--->bounding box的NMS已經不符合需求
			--->想用mask做NMS判斷
				???? mask做NMS判斷不知道會花上多少時間(研讀一下NMS程式碼)
				???? mask做NMS判斷不知道會花上多少資源
					--->DAVIS evaluation好像有做過類似的東西，detection多時，記憶體耗很兇
					
				!?!? 當初yolact使用Fast NMS取代NMS，代表NMS本身應該就有點耗時
					--->能否盡量不使NMS變複雜
						???? 是否能利用coefficient來輔助NMS
			
	2.boxing fisheye
	
		---觀察boxing fisheye---
		
		#後面的觀眾有些會被偵測進來
		#理想狀態下應該把目標focus在前面拳擊手就好
			--->yolact本身就沒有眼睛focus的概念(更甚來說也沒看過有論文有)
				--->需要加上新的資訊
					--->去找看看有沒有專注於眼睛focus上的論文
					
			--->同一類物件很靠近的時候，時常會發生將兩個物件判斷成一個物件的情況
			
				(1)由於同一類物件feature本來就相似
					--->理想來說是這樣，也不太會想改變這塊
					
				(2)由於bounding box不明確
					--->對於這種需要更加細膩的segmentation來說
					--->一開始設計for object detection的bounding box可能已經不敷使用
						--->是否該開始研究key point detection ???
					**** key point為只針對人類這一個class的challenge
						
				(3)由於yolact的bounding box其實並沒有那麼準
					--->這應該是SSD的問題，追求快的同時也得犧牲掉feature的精準度
						--->利用上面key point的方法可能可以解決 ???
					**** 同上