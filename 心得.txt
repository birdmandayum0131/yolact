2020/08/25

	1. car roundabout
		box ID 效果不錯 主車輛完全沒有被搶走
		prior 256  最後幾個frame被右下角的紅車搶走了(原因 ??)
		only 256第一個frame右上角的花叢ID混淆了(??) ---> 256維的ID可能不夠?
		
	2. dance twirl
		onlyID 與box ID效果不錯
		兩個混用效果不太好
		--->猜測是因為物體變化較大時 兩種ID的距離都會普遍增大  這次混用時使用了固定的threshold  有可能threshold過小過嚴格
		---> 單獨使用時  Threshold會設比較大  效果都還行  代表同一物體的距離還是相較於其他物體還短的

	3.boxing fisheye 
		box ID效果不錯
		bothID  box優先的效果也稍微比其他好一點
		---> box ID在畫面中央的物體(攝影機focus的物體) 效果都很不錯
		
		------>匈牙利演算法需要加入  不然其他物體有可能會把原本的ID搶走(蓋掉)
		------>threshold不可以是固定值  根據物體大小不同  物體本身的形狀變化情況不同  e.g. 跳舞的人 vs 車  平均距離會增加or減少
		------>每個frame都更新ID風險太大(一次估計錯誤就會造成後面的ID亂掉)
		
2020/09/08
	
	---yolact coefficient id---
	!!!設計此實驗之距離判斷以及Re id之過程時
	!!!我假設在此物體的輪廓並沒有分割的很糟糕的情況下(此detection有正確被偵測到)
	!!!"相同"物體的輪廓資訊應該自然就要比"不同"物體的輪廓資訊要來的近
	1.大部分的效果都非常不錯
	
		@假設coefficient包含的是物體在輪廓上的資訊
			--->輪廓的資訊非常有助於re-id
		
		#Yolact的coefficient並不是使用triplet的方式訓練的
		#但卻能自然的形成相同物體distance相近的id
			--->triplet loss訓練時其實並不一定要對margin有所限制
			----有時候兩者本來很相近，並不一定需要強制兩向量遠離(我認為可能會造成網路focus在一些比較偏激的feature)
			----只要物體與自己的距離比與其他物體還小就好了(?)
			
			--->triplet loss的目標本身並不明確
			----說不定可以用類似的一系列訓練方式解決triplet loss所針對的問題(?)
			>>>>目標並"不"是將相同物體產生距離相近的向量(triplet loss原本的目標)
			>>>>而是相同物體產生出來的向量可以卷積or組合成相同的目標(隨意猜想)

	2.少數image stream物體可能會被其他"相同位置"但"不同class"之物體競爭
		
		#會競爭代表他們的coefficient也很相近
			--->已經使用cross class NMS解決
			----coefficient可能還包含其他資訊(?)
			
	3.目前物體的class confidence score普遍低，導致容易與其他雜訊混淆
	
		#yolact似乎本來就這樣(不是DAVIS特例)
			--->想辦法找出前景與雜訊到底還有哪些地方不同(不單純利用confidence score濾雜訊)
			----從已知資訊中找出不同
			----從未獲得資訊中找出不同
	
			
	4.效果較差的情況大部分都是屬於"人"
	
		#唯獨"人"這類物體效果特別不好(打從mask就不太好)
			--->人類相較其他class在"外觀"、"輪廓"上較為複雜
			----不太能用與其他class相同維度的向量來描述
			